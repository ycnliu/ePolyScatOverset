#!/Users/lucchese/anaconda/bin/python
#
# Plotparam2DAACnvMatLab3.py
#
# Make polar plots of amplitudes generated by CnvMatLabNa of CnvMatLab for fixed field and azimuthal
# orientations - with integration over acceptance angles for the polarization directions relative to the molecular
# or recoil frame
#
# this script can produce four different plots
# 1) The full MFPAD
# 2) The RFPAD for averaging around the z-axis
#
# Using the file specified in the argument list of the call to the script, i.e. in sys.argv[1]
# The plot type is given in the argument list with the default being MFPAD
# also in the argument list is filed polar azimuthal angles and the electron azimuthal angle
#
# Expected values in argv
# sys.argv[1] - Input file name
# sys.argv[2] - PlotType
# sys.argv[3] - value of phi of the emission direction 
# using legendre polynomials from scipy.special
# lp, lpd = sp.lpmn(2,2,0.5)
# lp[m][l]

import sys
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from scipy import special as sp
import math

class Coef():
    def __init__(self, Entry):
       self.c = float(Entry[0])
       self.l = int(Entry[1])
       self.lp = int(Entry[2])
       self.m = int(Entry[3])
       self.mp = int(Entry[4])
       self.sc = int(Entry[5])

def polar2cart(r,theta,phi):
# return [x,y,z] from r, theta, phi in degrees
    thetarad = np.deg2rad(theta)
    phirad = np.deg2rad(phi)
    return np.array([r * np.sin(thetarad) * np.cos(phirad),
         r * np.sin(thetarad) * np.sin(phirad),
         r * np.cos(thetarad)])

def cart2polar(x,y,z):
# return [r, theta, phi]
    r       =  np.sqrt(x*x + y*y + z*z)
    theta   =  np.rad2deg(np.arccos(z/r)) #to degrees
    phi     =  np.rad2deg(np.arctan2(y,x)) #to degrees
    return np.array([r,theta,phi])

FileName=str(sys.argv[1])
PlotType=str(sys.argv[2])

if PlotType != "RFPAD"  and PlotType != "MFPAD" :
    sys.exit("Bad PlotType - should be MFPAD or RFPAD")

PhiEleindeg=float(sys.argv[3])
ThetaPhindeg=[float(sys.argv[4]),float(sys.argv[5])]
InPlaneAccept=float(sys.argv[6])
NInPlaneAve=int(sys.argv[7])
OutPlaneAccept=float(sys.argv[8])
NOutPlaneAve=int(sys.argv[9])

print("Plot Type", PlotType)
print("Read File",FileName)

print("Emission direction phi ", PhiEleindeg)
print("Field direction theta ", ThetaPhindeg[0], " phi ", ThetaPhindeg[1])
print("Acceptance angle in plane ", InPlaneAccept, " number of in plane averaging points ", NInPlaneAve)
print("Acceptance angle out of plane ", OutPlaneAccept, " number of out of plane averaging points ", NOutPlaneAve)

# compute the points which will be sampled from the acceptance angles that have been read in
CenterFieldCart = polar2cart(1.,ThetaPhindeg[0],ThetaPhindeg[1])
MoleculeCart=np.array([0.,0.,1.0])
OutOfPlaneCart=np.cross(CenterFieldCart,MoleculeCart)
NormOutOfPlane=np.sqrt(np.dot(OutOfPlaneCart,OutOfPlaneCart))
if NormOutOfPlane < 1.0e-5 :
    OutOfPlaneCart = np.array([0., 1., 0.])
else :
    OutOfPlaneCart *= 1.0/NormOutOfPlane

if OutOfPlaneCart[1] < 0. :
    OutOfPlaneCart = -OutOfPlaneCart

InPlanePerpCart=np.cross(OutOfPlaneCart, CenterFieldCart)
CoordTran=np.array([CenterFieldCart,InPlanePerpCart,OutOfPlaneCart])

print("Axes defining acceptance angle")
print("x axis (in plane perpendicular) ", InPlanePerpCart)
print("y axis (out of plane) ", OutOfPlaneCart)
print("z axis (recoil axis) ", MoleculeCart)

outplanecosstart=np.cos(np.deg2rad(90.-OutPlaneAccept))
outplanecosend=np.cos(np.deg2rad(90.+OutPlaneAccept))
FieldDirec=[]
for inplane in range(NInPlaneAve) :
    for outplane in range(NOutPlaneAve) :
        anginplane = -InPlaneAccept+ inplane*2.*InPlaneAccept/(NInPlaneAve-1.)
        angoutplane = np.rad2deg(np.arccos(outplanecosstart+outplane*(outplanecosend-outplanecosstart)/(NOutPlaneAve-1)))
        FieldCart=polar2cart(1.,angoutplane,anginplane)
        InOriginalFrame=np.matmul(CoordTran.transpose(),FieldCart)
        NewCart = cart2polar(*InOriginalFrame.tolist())
        FieldDirec += [NewCart.tolist()]
# print("Directions to average over")
# print(FieldDirec)
        
DataIn=[]
infile=open(FileName,"r")

lmax=int(next(infile))

Coefs=[]
for line in infile :
    Coefs+=[Coef(line.split())]

# number of points in each angle
npTheta=361
ThetaOrig=np.linspace(0,2*np.pi,npTheta)
Theta=np.copy(ThetaOrig)
Phi=np.full(npTheta,np.deg2rad(PhiEleindeg))
for i in range(npTheta) :
   if (Theta[i] > np.pi) :
      Theta[i] = 2*np.pi - Theta[i]
      Phi[i] += np.pi

PValues = []
for i in range(npTheta) :
    lp, lpd = sp.lpmn(lmax, lmax, np.cos(Theta[i]))
    PValues += [lp]

AAWeight = 1./(NInPlaneAve*NOutPlaneAve)
Dist = np.zeros(npTheta, dtype=float)
PPc=np.zeros((3,5))
PPs=np.zeros((3,5))
for ThisFieldDirec in FieldDirec :
    # print("This thetan ",ThisFieldDirec[1], " this phin ", ThisFieldDirec[2])
    PPValues, lpd = sp.lpmn(2,2,np.cos(np.deg2rad(ThisFieldDirec[1])))
    for l in range(3) :
        for nm in range(2*l + 1) :
            PPc[l,nm] += PPValues[abs(nm-l)][l]*np.cos((nm-l)*np.deg2rad(ThisFieldDirec[2]))
            PPs[l,nm] += PPValues[abs(nm-l)][l]*np.sin((nm-l)*np.deg2rad(ThisFieldDirec[2]))
PPc *= AAWeight
PPs *= AAWeight
for iCoef in Coefs :
    if PlotType == "MFPAD" or (PlotType == "RFPAD" and iCoef.m == -iCoef.mp) :
        for kTheta in range(npTheta) :
            if iCoef.sc == 1 :
                Dist[kTheta] += (iCoef.c*PValues[kTheta][abs(iCoef.m)][iCoef.l]
                                *(PPc[iCoef.lp,iCoef.mp+iCoef.lp]*np.cos(iCoef.m*Phi[kTheta])
                                 -PPs[iCoef.lp,iCoef.mp+iCoef.lp]*np.sin(iCoef.m*Phi[kTheta])))
                                 
#                                      *PPValues[abs(iCoef.mp)][iCoef.lp]
#                                      *+iCoef.mp*np.deg2rad(ThisFieldDirec[2])))
            else :
                Dist[kTheta] += (iCoef.c*PValues[kTheta][abs(iCoef.m)][iCoef.l]
                                *(PPc[iCoef.lp,iCoef.mp+iCoef.lp]*np.sin(iCoef.m*Phi[kTheta])
                                 +PPs[iCoef.lp,iCoef.mp+iCoef.lp]*np.cos(iCoef.m*Phi[kTheta])))
#                                 *PPValues[abs(iCoef.mp)][iCoef.lp]
#                                 *np.sin(iCoef.m*Phi[kTheta]+iCoef.mp*np.deg2rad(ThisFieldDirec[2])))

print("Max Value", np.amax(Dist))
Dist = np.maximum(1.0e-6,Dist)
dotloc=FileName.rfind(".")

if dotloc >= 0 :
    FileNameBase=FileName[:dotloc]
else :
    FileNameBase=FileName
FileNameOut=FileNameBase+"AAplt.dat"
fout=open(FileNameOut,"a")
fout.write(FileNameBase+" {0:<7s} ".format(PlotType) + " Theta N {0:7.1f} Phi N {1:7.1f} Phi E {2:7.1f}\n".format(ThetaPhindeg[0],ThetaPhindeg[1], PhiEleindeg))
fout.write("{:10d}\n".format(npTheta))
for i in range(npTheta) :
    fout.write("{0:14.6e} {1:14.6e}\n".format(ThetaOrig[i],Dist[i]))
fout.close()


                
