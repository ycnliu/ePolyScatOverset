#!/Users/lucchese/anaconda/bin/python

# Make 3d plots of amplitudes generated by CnvLinFull for a small selection of
# field orientations
#
# A different pdf is generated for each view for all of the field directions found
# in the file specified in the argument list of the call to the script, i.e. in sys.argv[1]

# using legendre polynomials from scipy.special
# lp, lpd = sp.lpmn(2,2,0.5)
# lp[m][l]

import sys
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from scipy import special as sp

class Coef():
    def __init__(self, Entry):
       self.c = float(Entry[0])
       self.l = int(Entry[1])
       self.lp = int(Entry[2])
       self.m = int(Entry[3])
       self.mp = int(Entry[4])
       self.sc = int(Entry[5])

FileName=sys.argv[1]
print "Read File",FileName


DataIn=[]
infile=open(FileName,"r")

NPics=int(next(infile))
ThetaPhindeg=[]
Labels=[]
for i in range(NPics) :
    ThetaPhindeg += [(map(float,next(infile).split()))]
    Labels+=[next(infile)]

print ThetaPhindeg
print Labels

lmax=int(next(infile))

Coefs=[]
for line in infile :
    Coefs+=[Coef(line.split())]

# number of points in each angle
npTheta=40
npPhi = 40
shape2D=(npPhi,npTheta)
Theta=np.linspace(0,np.pi,npTheta)
Phi=np.linspace(0,2*np.pi,npPhi)
PValues = []
for i in range(npTheta) :
    lp, lpd = sp.lpmn(lmax, lmax, np.cos(Theta[i]))
    PValues += [lp]


fsz=10
subfig=[]
pltlayout=int(np.ceil(np.sqrt(NPics)))
x=[]
y=[]
z=[]
xmax=0.
xmin=0.
ymax=0.
ymin=0.
zmax=0.
zmin=0.

[Theta2D,Phi2D]=np.meshgrid(Theta,Phi)

for iPics in range(NPics) :
    PPValues, lpd = sp.lpmn(2,2,np.cos(np.deg2rad(ThetaPhindeg[iPics][0])))

    Dist = np.zeros(shape2D, dtype=float)
    for iCoef in Coefs :
        for kTheta in range(npTheta) :
            for kPhi in range(npPhi) :
                if iCoef.sc == 1 :
                    Dist[kPhi,kTheta] += (iCoef.c*PValues[kTheta][abs(iCoef.m)][iCoef.l]
                      *PPValues[abs(iCoef.mp)][iCoef.lp]*np.cos(iCoef.m*Phi[kPhi]+iCoef.mp*np.deg2rad(ThetaPhindeg[iPics][1])))
                else :
                    Dist[kPhi,kTheta] += (iCoef.c*PValues[kTheta][abs(iCoef.m)][iCoef.l]
                      *PPValues[abs(iCoef.mp)][iCoef.lp]*np.sin(iCoef.m*Phi[kPhi]+iCoef.mp*np.deg2rad(ThetaPhindeg[iPics][1])))

    print "iPics", iPics
    print "Max Value", np.amax(Dist)
    Dist = np.maximum(1.0e-6,Dist)

    x.append(np.sin(Theta2D)*np.cos(Phi2D)*Dist)
    y.append(np.sin(Theta2D)*np.sin(Phi2D)*Dist)
    z.append(np.cos(Theta2D)*Dist)
    xmax=max(xmax,np.amax(x[-1]))
    xmin=min(xmin,np.amin(x[-1]))
    ymax=max(ymax,np.amax(y[-1]))
    ymin=min(ymin,np.amin(y[-1]))
    zmax=max(zmax,np.amax(z[-1]))
    zmin=min(zmin,np.amin(z[-1]))

# views[] = [elevation, azimuth, label]

views=[[20,-40,"side"],[90,0,"top"],[0,0,"fy"],[0,90,"fx"]]

for thisview in views :
#	fig1=plt.figure(num=Filename, figsize=(5.*pltlayout,5.*pltlayout))
	fig1=plt.figure(figsize=(5.*pltlayout,5.*pltlayout))
	for indx in range(NPics) :
		subfig += [fig1.add_subplot(pltlayout,pltlayout,indx+1,projection='3d')]
		subfig[-1].plot_surface(x[indx],y[indx],z[indx],rstride=1,cstride=1,color='r',linewidth=0.5)
		subfig[-1].elev, subfig[-1].azim = thisview[0], thisview[1]-90  
# Adjustment of azim angle to correspond to matlab definition
# where azim = 0 corresponds to looking along the y axis in the -y to +y direction
		subfig[-1].set_title("Theta N {0:7.1f}   Phi N {1:7.1f}".format(ThetaPhindeg[indx][0],ThetaPhindeg[indx][1]) ,fontsize=fsz)
		subfig[-1].set_xlabel('x')
		subfig[-1].set_xlim([1.1*xmin,1.1*xmax])
		subfig[-1].set_ylabel('y')
		subfig[-1].set_ylim([1.1*ymin,1.1*ymax])
		subfig[-1].set_zlabel('z')
		subfig[-1].set_zlim([1.1*zmin,1.1*zmax])

# 
	fig1.suptitle(FileName+" View "+thisview[2])
# plt.show()
# fig1.tight_layout()
	fig1.savefig(FileName+thisview[2]+".pdf")


                
