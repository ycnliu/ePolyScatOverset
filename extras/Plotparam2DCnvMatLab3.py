#!/Users/lucchese/anaconda/bin/python
#
# Plotparam2DCnvMatLab3.py
#
# Make polar plots of amplitudes generated by CnvMatLabNa of CnvMatLab for fixed field and azimuthal
# orientations
#
# this script can produce four different plots
# 1) The full MFPAD
# 2) The RFPAD for averaging around the z-axis
# 3) THE PAMFPAD which is averaged over all polarization directions 
# 4) PARFPAD, polarization averaged RFPAD
#
# Using the file specified in the argument list of the call to the script, i.e. in sys.argv[1]
# The plot type is given in the argument list with the default being MFPAD
# also in the argument list is filed polar azimuthal angles and the electron azimuthal angle
#
# using legendre polynomials from scipy.special
# lp, lpd = sp.lpmn(2,2,0.5)
# lp[m][l]

import sys
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from scipy import special as sp

class Coef():
    def __init__(self, Entry):
       self.c = float(Entry[0])
       self.l = int(Entry[1])
       self.lp = int(Entry[2])
       self.m = int(Entry[3])
       self.mp = int(Entry[4])
       self.sc = int(Entry[5])

FileName=str(sys.argv[1])
PlotType=str(sys.argv[2])

if PlotType != "RFPAD" and PlotType != "PAMFPAD" and PlotType != "MFPAD" and PlotType != "PARFPAD" :
    sys.exit("Bad PlotType - should be MFPAD, RFPAD, PAMFPAD, or PARFPAD")

if PlotType != "PAMFPAD" and PlotType != "PARFPAD" :
    PhiEleindeg=float(sys.argv[3])
    ThetaPhindeg=[float(sys.argv[4]),float(sys.argv[5])]
elif PlotType == "PAMFPAD" :
    PhiEleindeg=float(sys.argv[3]) # phi of the electron with theta going from 0 to 360 degs
    ThetaPhindeg=[0.,0.]    
else :
    PhiEleindeg=0.
    ThetaPhindeg=[0.,0.]    

print("Plot Type", PlotType)
print("Read File",FileName)
if PlotType != "PAMFPAD" and PlotType != "PARFPAD" :
    print("Field direction theta ", ThetaPhindeg[0], " phi ", ThetaPhindeg[1])
    print("Emission direction phi ", PhiEleindeg)

DataIn=[]
infile=open(FileName,"r")

lmax=int(next(infile))

Coefs=[]
for line in infile :
    Coefs+=[Coef(line.split())]

# number of points in each angle
npTheta=361
ThetaOrig=np.linspace(0,2*np.pi,npTheta)
Theta=np.copy(ThetaOrig)
Phi=np.full(npTheta,np.deg2rad(PhiEleindeg))
for i in range(npTheta) :
   if (Theta[i] > np.pi) :
      Theta[i] = 2*np.pi - Theta[i]
      Phi[i] += np.pi

PValues = []
for i in range(npTheta) :
    lp, lpd = sp.lpmn(lmax, lmax, np.cos(Theta[i]))
    PValues += [lp]

PPValues, lpd = sp.lpmn(2,2,np.cos(np.deg2rad(ThetaPhindeg[0])))

Dist = np.zeros(npTheta, dtype=float)
for iCoef in Coefs :
    if (PlotType == "MFPAD" or (PlotType == "RFPAD" and iCoef.m == -iCoef.mp)
                            or (PlotType == "PAMFPAD" and iCoef.lp == 0)
                            or (PlotType == "PARFPAD" and iCoef.m == -iCoef.mp and iCoef.lp == 0)) :
        for kTheta in range(npTheta) :
            if iCoef.sc == 1 :
                Dist[kTheta] += (iCoef.c*PValues[kTheta][abs(iCoef.m)][iCoef.l]
                                 *PPValues[abs(iCoef.mp)][iCoef.lp]
                                 *np.cos(iCoef.m*Phi[kTheta]+iCoef.mp*np.deg2rad(ThetaPhindeg[1])))
            else :
                Dist[kTheta] += (iCoef.c*PValues[kTheta][abs(iCoef.m)][iCoef.l]
                                 *PPValues[abs(iCoef.mp)][iCoef.lp]
                                 *np.sin(iCoef.m*Phi[kTheta]+iCoef.mp*np.deg2rad(ThetaPhindeg[1])))

print("Max Value", np.amax(Dist))
Dist = np.maximum(1.0e-6,Dist)
dotloc=FileName.rfind(".")
if dotloc >= 0 :
    FileNameBase=FileName[:dotloc]
else :
    FileNameBase=FileName
FileNameOut=FileNameBase+"2Dplt.dat"
fout=open(FileNameOut,"a")
fout.write(FileNameBase+" {0:<7s} ".format(PlotType) + " Theta N {0:7.1f} Phi N {1:7.1f} Phi E {2:7.1f}\n".format(ThetaPhindeg[0],ThetaPhindeg[1], PhiEleindeg))
fout.write("{:10d}\n".format(npTheta))
for i in range(npTheta) :
    fout.write("{0:14.6e} {1:14.6e}\n".format(ThetaOrig[i],Dist[i]))
fout.close()


                
