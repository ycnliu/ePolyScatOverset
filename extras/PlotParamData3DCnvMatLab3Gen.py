#!/Users/lucchese/anaconda/bin/python
#
# PlotparamData3DCnvMatLab3Gen.py
#
# Write out data for 3d plots of amplitudes generated by CnvMatLabNa of CnvMatLab for a small selection of
# field orientations
#
# this script can produce four different plots
# 1) The full MFPAD
# 2) The RFPAD for averaging around the z-axis
# 3) THE PAMFPAD which is averaged over all polarization directions 
# 4) PARFPAD, polarization averaged RFPAD
#
# A different pdf is generated for each view for all of the field directions found
# in the file specified in the argument list of the call to the script, i.e. in sys.argv[1]
# The plot type is given in the argument list with the default being MFPAD
#
# using legendre polynomials from scipy.special
# lp, lpd = sp.lpmn(2,2,0.5)
# lp[m][l]

import sys
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from scipy import special as sp

class Coef():
    def __init__(self, Entry):
       self.c = float(Entry[0])
       self.l = int(Entry[1])
       self.lp = int(Entry[2])
       self.m = int(Entry[3])
       self.mp = int(Entry[4])
       self.sc = int(Entry[5])

FileName=str(sys.argv[1])
dotloc=FileName.rfind(".")
if dotloc >= 0 :
    FileNameBase=FileName[:dotloc]
else :
    FileNameBase=FileName

PlotType=str(sys.argv[2])
if PlotType != "RFPAD" and PlotType != "PAMFPAD" and PlotType != "MFPAD" and PlotType != "PARFPAD" :
    sys.exit("Bad PlotType - should be MFPAD, RFPAD, PAMFPAD, or PARFPAD")
if PlotType != "PAMFPAD" and PlotType != "PARFPAD" :
    ThetaPhindeg=[float(sys.argv[3]),float(sys.argv[4])]
else :
    ThetaPhindeg=[0.,0.]
    
print("Plot Type", PlotType)
print("Read File",FileName)
if PlotType != "PAMFPAD" and PlotType != "PARFPAD" :
    print("Field direction theta ", ThetaPhindeg[0], " phi ", ThetaPhindeg[1])


DataIn=[]
infile=open(FileName,"r")

lmax=int(next(infile))

Coefs=[]
for line in infile :
    Coefs+=[Coef(line.split())]

# number of points in each angle
npTheta=181
npPhi = 361
shape2D=(npPhi,npTheta)
Theta=np.linspace(0,np.pi,npTheta)
Phi=np.linspace(0,2*np.pi,npPhi)
PValues = []
for i in range(npTheta) :
    lp, lpd = sp.lpmn(lmax, lmax, np.cos(Theta[i]))
    PValues += [lp]

fsz=10

xmax=0.
xmin=0.
ymax=0.
ymin=0.
zmax=0.
zmin=0.

[Theta2D,Phi2D]=np.meshgrid(Theta,Phi)
PPValues, lpd = sp.lpmn(2,2,np.cos(np.deg2rad(ThetaPhindeg[0])))

Dist = np.zeros(shape2D, dtype=float)
for iCoef in Coefs :
    if (PlotType == "MFPAD" or (PlotType == "RFPAD" and iCoef.m == -iCoef.mp)
            or (PlotType == "PAMFPAD" and iCoef.lp == 0)
            or (PlotType == "PARFPAD" and iCoef.m == -iCoef.mp and iCoef.lp == 0)) :
        for kTheta in range(npTheta) :
            for kPhi in range(npPhi) :
                if iCoef.sc == 1 :
                    Dist[kPhi,kTheta] += (iCoef.c*PValues[kTheta][abs(iCoef.m)][iCoef.l]
                                          *PPValues[abs(iCoef.mp)][iCoef.lp]
                                          *np.cos(iCoef.m*Phi[kPhi]+iCoef.mp*np.deg2rad(ThetaPhindeg[1])))
                else :
                    Dist[kPhi,kTheta] += (iCoef.c*PValues[kTheta][abs(iCoef.m)][iCoef.l]
                                          *PPValues[abs(iCoef.mp)][iCoef.lp]
                                          *np.sin(iCoef.m*Phi[kPhi]+iCoef.mp*np.deg2rad(ThetaPhindeg[1])))

print("Max Value", np.amax(Dist))
Dist = np.maximum(1.0e-6,Dist)

dotloc=FileName.rfind(".")
if dotloc >= 0 :
    FileNameBase=FileName[:dotloc]
else :
    FileNameBase=FileName
FileNameOut=FileNameBase+"3Dxyz.dat"
fout=open(FileNameOut,"a")
fout.write(FileNameBase+" {0:<7s} ".format(PlotType) + " Theta N {0:7.1f} Phi N {1:7.1f}\n".format(ThetaPhindeg[0],ThetaPhindeg[1]))
fout.write("{:10d}\n".format(npTheta*npPhi))
for i in range(npTheta) :
    for j in range(npPhi) :
        fout.write("{0:14.6e} {1:14.6e} {2:14.6e}\n".format(Theta[i],Phi[j],Dist[j,i]))
fout.close()
