#!/Users/lucchese/anaconda/bin/python
#
# Plotparam3DCnvMatLab3Gen.py
#
# Make 3d plots of amplitudes generated by CnvMatLabNa of CnvMatLab for a small selection of
# field orientations
#
# this script can produce four different plots
# 1) The full MFPAD
# 2) The RFPAD for averaging around the z-axis
# 3) THE PAMFPAD which is averaged over all polarization directions 
# 4) PARFPAD, polarization averaged RFPAD
#
# A different pdf is generated for each view for all of the field directions found
# in the file specified in the argument list of the call to the script, i.e. in sys.argv[1]
# The plot type is given in the argument list with the default being MFPAD
#
# using legendre polynomials from scipy.special
# lp, lpd = sp.lpmn(2,2,0.5)
# lp[m][l]

import sys
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from scipy import special as sp

class Coef():
    def __init__(self, Entry):
       self.c = float(Entry[0])
       self.l = int(Entry[1])
       self.lp = int(Entry[2])
       self.m = int(Entry[3])
       self.mp = int(Entry[4])
       self.sc = int(Entry[5])

FileName=str(sys.argv[1])
dotloc=FileName.rfind(".")
if dotloc >= 0 :
    FileNameBase=FileName[:dotloc]
else :
    FileNameBase=FileName

PlotType=str(sys.argv[2])
if PlotType != "RFPAD" and PlotType != "PAMFPAD" and PlotType != "MFPAD" and PlotType != "PARFPAD" :
    sys.exit("Bad PlotType - should be MFPAD, RFPAD, PAMFPAD, or PARFPAD")
if PlotType != "PAMFPAD" and PlotType != "PARFPAD" :
    ThetaPhindeg=[float(sys.argv[3]),float(sys.argv[4])]
else :
    ThetaPhindeg=[0.,0.]
    
print("Plot Type", PlotType)
print("Read File",FileName)
if PlotType != "PAMFPAD" and PlotType != "PARFPAD" :
    print("Field direction theta ", ThetaPhindeg[0], " phi ", ThetaPhindeg[1])


DataIn=[]
infile=open(FileName,"r")

lmax=int(next(infile))

Coefs=[]
for line in infile :
    Coefs+=[Coef(line.split())]

# number of points in each angle
npTheta=40
npPhi = 40
shape2D=(npPhi,npTheta)
Theta=np.linspace(0,np.pi,npTheta)
Phi=np.linspace(0,2*np.pi,npPhi)
PValues = []
for i in range(npTheta) :
    lp, lpd = sp.lpmn(lmax, lmax, np.cos(Theta[i]))
    PValues += [lp]

fsz=10
subfig=[]

xmax=0.
xmin=0.
ymax=0.
ymin=0.
zmax=0.
zmin=0.

[Theta2D,Phi2D]=np.meshgrid(Theta,Phi)
PPValues, lpd = sp.lpmn(2,2,np.cos(np.deg2rad(ThetaPhindeg[0])))

Dist = np.zeros(shape2D, dtype=float)
for iCoef in Coefs :
    if (PlotType == "MFPAD" or (PlotType == "RFPAD" and iCoef.m == -iCoef.mp)
            or (PlotType == "PAMFPAD" and iCoef.lp == 0)
            or (PlotType == "PARFPAD" and iCoef.m == -iCoef.mp and iCoef.lp == 0)) :
        for kTheta in range(npTheta) :
            for kPhi in range(npPhi) :
                if iCoef.sc == 1 :
                    Dist[kPhi,kTheta] += (iCoef.c*PValues[kTheta][abs(iCoef.m)][iCoef.l]
                                          *PPValues[abs(iCoef.mp)][iCoef.lp]
                                          *np.cos(iCoef.m*Phi[kPhi]+iCoef.mp*np.deg2rad(ThetaPhindeg[1])))
                else :
                    Dist[kPhi,kTheta] += (iCoef.c*PValues[kTheta][abs(iCoef.m)][iCoef.l]
                                          *PPValues[abs(iCoef.mp)][iCoef.lp]
                                          *np.sin(iCoef.m*Phi[kPhi]+iCoef.mp*np.deg2rad(ThetaPhindeg[1])))

print("Max Value", np.amax(Dist))
Dist = np.maximum(1.0e-6,Dist)

x=np.sin(Theta2D)*np.cos(Phi2D)*Dist
y=np.sin(Theta2D)*np.sin(Phi2D)*Dist
z=np.cos(Theta2D)*Dist
xmax=max(xmax,np.amax(x))
xmin=min(xmin,np.amin(x))
ymax=max(ymax,np.amax(y))
ymin=min(ymin,np.amin(y))
zmax=max(zmax,np.amax(z))
zmin=min(zmin,np.amin(z))

views=[[20,-40,"side"],[90,0,"top"],[0,0,"fy"],[0,90,"fx"]]
pltlayout=int(np.ceil(np.sqrt(len(views))))

fig1=plt.figure(figsize=(5.*pltlayout,5.*pltlayout))
for iview in range(len(views)) :
    thisview = views[iview]
    subfig += [fig1.add_subplot(pltlayout,pltlayout,iview+1,projection='3d')]
    subfig[-1].plot_wireframe(x,y,z,rstride=1,cstride=1,color='b',linewidth=0.5)
    subfig[-1].elev, subfig[-1].azim = thisview[0], thisview[1]-90  
# Adjustment of azim angle to correspond to matlab definition
# where azim = 0 corresponds to looking along the y axis in the -y to +y direction
    subfig[-1].set_title("View "+thisview[2] ,fontsize=fsz)
    subfig[-1].set_xlabel('x')
    subfig[-1].set_xlim([1.1*xmin,1.1*xmax])
    subfig[-1].set_ylabel('y')
    subfig[-1].set_ylim([1.1*ymin,1.1*ymax])
    subfig[-1].set_zlabel('z')
    subfig[-1].set_zlim([1.1*zmin,1.1*zmax])
    
if PlotType == "PAMFPAD" or PlotType == "PARFPAD" :
    fig1.suptitle(FileNameBase+" "+PlotType)
else :
    fig1.suptitle(FileNameBase+" "+PlotType
                  + " Theta N {0:7.1f} Phi N {1:7.1f}".format(ThetaPhindeg[0],ThetaPhindeg[1]))
# plt.show()
# fig1.tight_layout()
fig1.savefig(FileNameBase+PlotType+"T"+str(int(round(ThetaPhindeg[0])))+"P"+str(int(round(ThetaPhindeg[1])))+".pdf")
